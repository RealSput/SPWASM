let array = (l) {
    return [null] * l;
}

type @stack_vm
impl @stack_vm {
    create: () {
        return @stack_vm::{stack: [], pc: 0, table: []}
    },
    set_memory: (self, pages) {
        self.memory = array(pages * 1024);
    },
    execute: (self, instruction) {
        match(instruction.opcode) {
            =="i32.const": () {
                self.stack.push(instruction.args[0]);
                }(),
            =="i32.add": () {
                let b = self.stack.pop();
                let a = self.stack.pop();
                self.stack.push(a + b);
                }(),
            =="i32.sub": () {
                let d = self.stack.pop();
                let c = self.stack.pop();
                self.stack.push(c - d);
                }(),
            =="table": () {
                self.table = array(instruction.args[0])
                }(),
            =="elem": () {
                let offset = self.stack.pop();
                for i in instruction.args {
                    let func_name = instruction.args[i + 1];
                    let func = self.functions[func_name];
                    self.table[offset + i] = func;
                }
                }(),
            =="call_indirect": () {
                if (self.stack.length < 1) {
                    throw "Stack underflow";
                }
                let func_index = self.stack.pop();
                if (func_index.type != @number) {
                    throw "Invalid function index";
                }
                let func = self.functions[func_index];
                if (func) {
                    func();
                } else {
                    throw "Function at index {} not found".fmt(func_index);
                }
                }(),
            =="i32.store": () {
                let value_i32s = instruction.args[0];
                let offset_i32s = instruction.args[1];
                self.memory[offset_i32s] = value_i32s;
                }(),
            =="i32.load": () {
                let offset_i32l = instruction.args[0];
                self.stack.push(self.memory[offset_i32l]);
                }(),
            =="local.get": () {
            	let alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
            	let isInt = true;
            	let isar = instruction.args[0];
            	for i in isar.split('') {
            		if (alpha.index(i) != null) {
            			isInt = false;
            		}
            	}
            	let res;
            	if (isInt) {
            		let oparcount = [];
            		for i in self.params {
            			oparcount.push(i[1])
            		}
            		res = oparcount[isar as @number]
            	} else {
            		res = self.params[isar]
            	}
                self.stack.push(res);instruction.args
                }(),
            else: () {
                throw "Unknown opcode: {}".fmt(instruction.opcode);
}()
        }
        self.pc++;
    },

    run: (self, code, let args = []) {
        let self.params = [];
        while (self.pc < code.length) {
            let instruction = code[self.pc];
            self.params = args
            self.execute(instruction);
        }
        return self.stack.pop();
    }
}
